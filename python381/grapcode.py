#coding:utf-8
from graphviz import Digraph

single_input = Digraph('single_input', filename='single_input.gv')
single_input.attr(rankdir='LR', size='8,5')
single_input.node('0',  shape='circle')
single_input.edge('0', '1', label='NEWLINE')
single_input.edge('0', '2', label='compound_stmt')
single_input.edge('0', '1', label='simple_stmt')
single_input.node('1',  shape='doublecircle')
single_input.node('2',  shape='circle')
single_input.edge('2', '1', label='NEWLINE')
single_input.render("single_input", directory="png", cleanup=True, format="png")
file_input = Digraph('file_input', filename='file_input.gv')
file_input.attr(rankdir='LR', size='8,5')
file_input.node('0',  shape='circle')
file_input.edge('0', '1', label='ENDMARKER')
file_input.edge('0', '0', label='NEWLINE')
file_input.edge('0', '0', label='stmt')
file_input.node('1',  shape='doublecircle')
file_input.render("file_input", directory="png", cleanup=True, format="png")
eval_input = Digraph('eval_input', filename='eval_input.gv')
eval_input.attr(rankdir='LR', size='8,5')
eval_input.node('0',  shape='circle')
eval_input.edge('0', '1', label='testlist')
eval_input.node('1',  shape='circle')
eval_input.edge('1', '2', label='ENDMARKER')
eval_input.edge('1', '1', label='NEWLINE')
eval_input.node('2',  shape='doublecircle')
eval_input.render("eval_input", directory="png", cleanup=True, format="png")
decorator = Digraph('decorator', filename='decorator.gv')
decorator.attr(rankdir='LR', size='8,5')
decorator.node('0',  shape='circle')
decorator.edge('0', '1', label='@')
decorator.node('1',  shape='circle')
decorator.edge('1', '2', label='dotted_name')
decorator.node('2',  shape='circle')
decorator.edge('2', '3', label='(')
decorator.edge('2', '4', label='NEWLINE')
decorator.node('3',  shape='circle')
decorator.edge('3', '5', label=')')
decorator.edge('3', '6', label='arglist')
decorator.node('4',  shape='doublecircle')
decorator.node('5',  shape='circle')
decorator.edge('5', '4', label='NEWLINE')
decorator.node('6',  shape='circle')
decorator.edge('6', '5', label=')')
decorator.render("decorator", directory="png", cleanup=True, format="png")
decorators = Digraph('decorators', filename='decorators.gv')
decorators.attr(rankdir='LR', size='8,5')
decorators.node('0',  shape='circle')
decorators.edge('0', '1', label='decorator')
decorators.node('1',  shape='doublecircle')
decorators.edge('1', '1', label='decorator')
decorators.render("decorators", directory="png", cleanup=True, format="png")
decorated = Digraph('decorated', filename='decorated.gv')
decorated.attr(rankdir='LR', size='8,5')
decorated.node('0',  shape='circle')
decorated.edge('0', '1', label='decorators')
decorated.node('1',  shape='circle')
decorated.edge('1', '2', label='async_funcdef')
decorated.edge('1', '2', label='classdef')
decorated.edge('1', '2', label='funcdef')
decorated.node('2',  shape='doublecircle')
decorated.render("decorated", directory="png", cleanup=True, format="png")
async_funcdef = Digraph('async_funcdef', filename='async_funcdef.gv')
async_funcdef.attr(rankdir='LR', size='8,5')
async_funcdef.node('0',  shape='circle')
async_funcdef.edge('0', '1', label='ASYNC')
async_funcdef.node('1',  shape='circle')
async_funcdef.edge('1', '2', label='funcdef')
async_funcdef.node('2',  shape='doublecircle')
async_funcdef.render("async_funcdef", directory="png", cleanup=True, format="png")
funcdef = Digraph('funcdef', filename='funcdef.gv')
funcdef.attr(rankdir='LR', size='8,5')
funcdef.node('0',  shape='circle')
funcdef.edge('0', '1', label='def')
funcdef.node('1',  shape='circle')
funcdef.edge('1', '2', label='NAME')
funcdef.node('2',  shape='circle')
funcdef.edge('2', '3', label='parameters')
funcdef.node('3',  shape='circle')
funcdef.edge('3', '4', label='->')
funcdef.edge('3', '5', label=':')
funcdef.node('4',  shape='circle')
funcdef.edge('4', '6', label='test')
funcdef.node('5',  shape='circle')
funcdef.edge('5', '7', label='TYPE_COMMENT')
funcdef.edge('5', '8', label='func_body_suite')
funcdef.node('6',  shape='circle')
funcdef.edge('6', '5', label=':')
funcdef.node('7',  shape='circle')
funcdef.edge('7', '8', label='func_body_suite')
funcdef.node('8',  shape='doublecircle')
funcdef.render("funcdef", directory="png", cleanup=True, format="png")
parameters = Digraph('parameters', filename='parameters.gv')
parameters.attr(rankdir='LR', size='8,5')
parameters.node('0',  shape='circle')
parameters.edge('0', '1', label='(')
parameters.node('1',  shape='circle')
parameters.edge('1', '2', label=')')
parameters.edge('1', '3', label='typedargslist')
parameters.node('2',  shape='doublecircle')
parameters.node('3',  shape='circle')
parameters.edge('3', '2', label=')')
parameters.render("parameters", directory="png", cleanup=True, format="png")
typedargslist = Digraph('typedargslist', filename='typedargslist.gv')
typedargslist.attr(rankdir='LR', size='8,5')
typedargslist.node('0',  shape='circle')
typedargslist.edge('0', '1', label='*')
typedargslist.edge('0', '2', label='**')
typedargslist.edge('0', '3', label='tfpdef')
typedargslist.node('1',  shape='doublecircle')
typedargslist.edge('1', '4', label=',')
typedargslist.edge('1', '5', label='TYPE_COMMENT')
typedargslist.edge('1', '6', label='tfpdef')
typedargslist.node('2',  shape='circle')
typedargslist.edge('2', '7', label='tfpdef')
typedargslist.node('3',  shape='doublecircle')
typedargslist.edge('3', '8', label=',')
typedargslist.edge('3', '9', label='=')
typedargslist.edge('3', '5', label='TYPE_COMMENT')
typedargslist.node('4',  shape='doublecircle')
typedargslist.edge('4', '2', label='**')
typedargslist.edge('4', '10', label='TYPE_COMMENT')
typedargslist.edge('4', '11', label='tfpdef')
typedargslist.node('5',  shape='doublecircle')
typedargslist.node('6',  shape='doublecircle')
typedargslist.edge('6', '4', label=',')
typedargslist.edge('6', '5', label='TYPE_COMMENT')
typedargslist.node('7',  shape='doublecircle')
typedargslist.edge('7', '12', label=',')
typedargslist.edge('7', '5', label='TYPE_COMMENT')
typedargslist.node('8',  shape='doublecircle')
typedargslist.edge('8', '13', label='*')
typedargslist.edge('8', '2', label='**')
typedargslist.edge('8', '14', label='/')
typedargslist.edge('8', '15', label='TYPE_COMMENT')
typedargslist.edge('8', '3', label='tfpdef')
typedargslist.node('9',  shape='circle')
typedargslist.edge('9', '16', label='test')
typedargslist.node('10',  shape='doublecircle')
typedargslist.edge('10', '2', label='**')
typedargslist.edge('10', '11', label='tfpdef')
typedargslist.node('11',  shape='doublecircle')
typedargslist.edge('11', '4', label=',')
typedargslist.edge('11', '17', label='=')
typedargslist.edge('11', '5', label='TYPE_COMMENT')
typedargslist.node('12',  shape='doublecircle')
typedargslist.edge('12', '5', label='TYPE_COMMENT')
typedargslist.node('13',  shape='doublecircle')
typedargslist.edge('13', '18', label=',')
typedargslist.edge('13', '5', label='TYPE_COMMENT')
typedargslist.edge('13', '19', label='tfpdef')
typedargslist.node('14',  shape='doublecircle')
typedargslist.edge('14', '20', label=',')
typedargslist.node('15',  shape='doublecircle')
typedargslist.edge('15', '13', label='*')
typedargslist.edge('15', '2', label='**')
typedargslist.edge('15', '14', label='/')
typedargslist.edge('15', '3', label='tfpdef')
typedargslist.node('16',  shape='doublecircle')
typedargslist.edge('16', '8', label=',')
typedargslist.edge('16', '5', label='TYPE_COMMENT')
typedargslist.node('17',  shape='circle')
typedargslist.edge('17', '6', label='test')
typedargslist.node('18',  shape='doublecircle')
typedargslist.edge('18', '2', label='**')
typedargslist.edge('18', '21', label='TYPE_COMMENT')
typedargslist.edge('18', '22', label='tfpdef')
typedargslist.node('19',  shape='doublecircle')
typedargslist.edge('19', '18', label=',')
typedargslist.edge('19', '5', label='TYPE_COMMENT')
typedargslist.node('20',  shape='doublecircle')
typedargslist.edge('20', '23', label='*')
typedargslist.edge('20', '2', label='**')
typedargslist.edge('20', '24', label='TYPE_COMMENT')
typedargslist.edge('20', '25', label='tfpdef')
typedargslist.node('21',  shape='doublecircle')
typedargslist.edge('21', '2', label='**')
typedargslist.edge('21', '22', label='tfpdef')
typedargslist.node('22',  shape='doublecircle')
typedargslist.edge('22', '18', label=',')
typedargslist.edge('22', '26', label='=')
typedargslist.edge('22', '5', label='TYPE_COMMENT')
typedargslist.node('23',  shape='doublecircle')
typedargslist.edge('23', '27', label=',')
typedargslist.edge('23', '5', label='TYPE_COMMENT')
typedargslist.edge('23', '28', label='tfpdef')
typedargslist.node('24',  shape='circle')
typedargslist.edge('24', '25', label='tfpdef')
typedargslist.node('25',  shape='doublecircle')
typedargslist.edge('25', '29', label=',')
typedargslist.edge('25', '30', label='=')
typedargslist.edge('25', '5', label='TYPE_COMMENT')
typedargslist.node('26',  shape='circle')
typedargslist.edge('26', '19', label='test')
typedargslist.node('27',  shape='doublecircle')
typedargslist.edge('27', '2', label='**')
typedargslist.edge('27', '31', label='TYPE_COMMENT')
typedargslist.edge('27', '32', label='tfpdef')
typedargslist.node('28',  shape='doublecircle')
typedargslist.edge('28', '27', label=',')
typedargslist.edge('28', '5', label='TYPE_COMMENT')
typedargslist.node('29',  shape='doublecircle')
typedargslist.edge('29', '33', label='*')
typedargslist.edge('29', '2', label='**')
typedargslist.edge('29', '34', label='TYPE_COMMENT')
typedargslist.edge('29', '25', label='tfpdef')
typedargslist.node('30',  shape='circle')
typedargslist.edge('30', '35', label='test')
typedargslist.node('31',  shape='doublecircle')
typedargslist.edge('31', '2', label='**')
typedargslist.edge('31', '32', label='tfpdef')
typedargslist.node('32',  shape='doublecircle')
typedargslist.edge('32', '27', label=',')
typedargslist.edge('32', '36', label='=')
typedargslist.edge('32', '5', label='TYPE_COMMENT')
typedargslist.node('33',  shape='doublecircle')
typedargslist.edge('33', '37', label=',')
typedargslist.edge('33', '5', label='TYPE_COMMENT')
typedargslist.edge('33', '38', label='tfpdef')
typedargslist.node('34',  shape='doublecircle')
typedargslist.edge('34', '33', label='*')
typedargslist.edge('34', '2', label='**')
typedargslist.edge('34', '25', label='tfpdef')
typedargslist.node('35',  shape='doublecircle')
typedargslist.edge('35', '29', label=',')
typedargslist.edge('35', '5', label='TYPE_COMMENT')
typedargslist.node('36',  shape='circle')
typedargslist.edge('36', '28', label='test')
typedargslist.node('37',  shape='doublecircle')
typedargslist.edge('37', '2', label='**')
typedargslist.edge('37', '39', label='TYPE_COMMENT')
typedargslist.edge('37', '40', label='tfpdef')
typedargslist.node('38',  shape='doublecircle')
typedargslist.edge('38', '37', label=',')
typedargslist.edge('38', '5', label='TYPE_COMMENT')
typedargslist.node('39',  shape='doublecircle')
typedargslist.edge('39', '2', label='**')
typedargslist.edge('39', '40', label='tfpdef')
typedargslist.node('40',  shape='doublecircle')
typedargslist.edge('40', '37', label=',')
typedargslist.edge('40', '41', label='=')
typedargslist.edge('40', '5', label='TYPE_COMMENT')
typedargslist.node('41',  shape='circle')
typedargslist.edge('41', '38', label='test')
typedargslist.render("typedargslist", directory="png", cleanup=True, format="png")
tfpdef = Digraph('tfpdef', filename='tfpdef.gv')
tfpdef.attr(rankdir='LR', size='8,5')
tfpdef.node('0',  shape='circle')
tfpdef.edge('0', '1', label='NAME')
tfpdef.node('1',  shape='doublecircle')
tfpdef.edge('1', '2', label=':')
tfpdef.node('2',  shape='circle')
tfpdef.edge('2', '3', label='test')
tfpdef.node('3',  shape='doublecircle')
tfpdef.render("tfpdef", directory="png", cleanup=True, format="png")
varargslist = Digraph('varargslist', filename='varargslist.gv')
varargslist.attr(rankdir='LR', size='8,5')
varargslist.node('0',  shape='circle')
varargslist.edge('0', '1', label='*')
varargslist.edge('0', '2', label='**')
varargslist.edge('0', '3', label='vfpdef')
varargslist.node('1',  shape='doublecircle')
varargslist.edge('1', '4', label=',')
varargslist.edge('1', '5', label='vfpdef')
varargslist.node('2',  shape='circle')
varargslist.edge('2', '6', label='vfpdef')
varargslist.node('3',  shape='doublecircle')
varargslist.edge('3', '7', label=',')
varargslist.edge('3', '8', label='=')
varargslist.node('4',  shape='doublecircle')
varargslist.edge('4', '2', label='**')
varargslist.edge('4', '9', label='vfpdef')
varargslist.node('5',  shape='doublecircle')
varargslist.edge('5', '4', label=',')
varargslist.node('6',  shape='doublecircle')
varargslist.edge('6', '10', label=',')
varargslist.node('7',  shape='doublecircle')
varargslist.edge('7', '11', label='*')
varargslist.edge('7', '2', label='**')
varargslist.edge('7', '12', label='/')
varargslist.edge('7', '3', label='vfpdef')
varargslist.node('8',  shape='circle')
varargslist.edge('8', '13', label='test')
varargslist.node('9',  shape='doublecircle')
varargslist.edge('9', '4', label=',')
varargslist.edge('9', '14', label='=')
varargslist.node('10',  shape='doublecircle')
varargslist.node('11',  shape='doublecircle')
varargslist.edge('11', '15', label=',')
varargslist.edge('11', '16', label='vfpdef')
varargslist.node('12',  shape='doublecircle')
varargslist.edge('12', '17', label=',')
varargslist.node('13',  shape='doublecircle')
varargslist.edge('13', '7', label=',')
varargslist.node('14',  shape='circle')
varargslist.edge('14', '5', label='test')
varargslist.node('15',  shape='doublecircle')
varargslist.edge('15', '2', label='**')
varargslist.edge('15', '18', label='vfpdef')
varargslist.node('16',  shape='doublecircle')
varargslist.edge('16', '15', label=',')
varargslist.node('17',  shape='doublecircle')
varargslist.edge('17', '19', label='*')
varargslist.edge('17', '2', label='**')
varargslist.edge('17', '20', label='vfpdef')
varargslist.node('18',  shape='doublecircle')
varargslist.edge('18', '15', label=',')
varargslist.edge('18', '21', label='=')
varargslist.node('19',  shape='doublecircle')
varargslist.edge('19', '22', label=',')
varargslist.edge('19', '23', label='vfpdef')
varargslist.node('20',  shape='doublecircle')
varargslist.edge('20', '24', label=',')
varargslist.edge('20', '25', label='=')
varargslist.node('21',  shape='circle')
varargslist.edge('21', '16', label='test')
varargslist.node('22',  shape='doublecircle')
varargslist.edge('22', '2', label='**')
varargslist.edge('22', '26', label='vfpdef')
varargslist.node('23',  shape='doublecircle')
varargslist.edge('23', '22', label=',')
varargslist.node('24',  shape='doublecircle')
varargslist.edge('24', '27', label='*')
varargslist.edge('24', '2', label='**')
varargslist.edge('24', '20', label='vfpdef')
varargslist.node('25',  shape='circle')
varargslist.edge('25', '28', label='test')
varargslist.node('26',  shape='doublecircle')
varargslist.edge('26', '22', label=',')
varargslist.edge('26', '29', label='=')
varargslist.node('27',  shape='doublecircle')
varargslist.edge('27', '30', label=',')
varargslist.edge('27', '31', label='vfpdef')
varargslist.node('28',  shape='doublecircle')
varargslist.edge('28', '24', label=',')
varargslist.node('29',  shape='circle')
varargslist.edge('29', '23', label='test')
varargslist.node('30',  shape='doublecircle')
varargslist.edge('30', '2', label='**')
varargslist.edge('30', '32', label='vfpdef')
varargslist.node('31',  shape='doublecircle')
varargslist.edge('31', '30', label=',')
varargslist.node('32',  shape='doublecircle')
varargslist.edge('32', '30', label=',')
varargslist.edge('32', '33', label='=')
varargslist.node('33',  shape='circle')
varargslist.edge('33', '31', label='test')
varargslist.render("varargslist", directory="png", cleanup=True, format="png")
vfpdef = Digraph('vfpdef', filename='vfpdef.gv')
vfpdef.attr(rankdir='LR', size='8,5')
vfpdef.node('0',  shape='circle')
vfpdef.edge('0', '1', label='NAME')
vfpdef.node('1',  shape='doublecircle')
vfpdef.render("vfpdef", directory="png", cleanup=True, format="png")
stmt = Digraph('stmt', filename='stmt.gv')
stmt.attr(rankdir='LR', size='8,5')
stmt.node('0',  shape='circle')
stmt.edge('0', '1', label='compound_stmt')
stmt.edge('0', '1', label='simple_stmt')
stmt.node('1',  shape='doublecircle')
stmt.render("stmt", directory="png", cleanup=True, format="png")
simple_stmt = Digraph('simple_stmt', filename='simple_stmt.gv')
simple_stmt.attr(rankdir='LR', size='8,5')
simple_stmt.node('0',  shape='circle')
simple_stmt.edge('0', '1', label='small_stmt')
simple_stmt.node('1',  shape='circle')
simple_stmt.edge('1', '2', label=';')
simple_stmt.edge('1', '3', label='NEWLINE')
simple_stmt.node('2',  shape='circle')
simple_stmt.edge('2', '3', label='NEWLINE')
simple_stmt.edge('2', '1', label='small_stmt')
simple_stmt.node('3',  shape='doublecircle')
simple_stmt.render("simple_stmt", directory="png", cleanup=True, format="png")
small_stmt = Digraph('small_stmt', filename='small_stmt.gv')
small_stmt.attr(rankdir='LR', size='8,5')
small_stmt.node('0',  shape='circle')
small_stmt.edge('0', '1', label='assert_stmt')
small_stmt.edge('0', '1', label='del_stmt')
small_stmt.edge('0', '1', label='expr_stmt')
small_stmt.edge('0', '1', label='flow_stmt')
small_stmt.edge('0', '1', label='global_stmt')
small_stmt.edge('0', '1', label='import_stmt')
small_stmt.edge('0', '1', label='nonlocal_stmt')
small_stmt.edge('0', '1', label='pass_stmt')
small_stmt.node('1',  shape='doublecircle')
small_stmt.render("small_stmt", directory="png", cleanup=True, format="png")
expr_stmt = Digraph('expr_stmt', filename='expr_stmt.gv')
expr_stmt.attr(rankdir='LR', size='8,5')
expr_stmt.node('0',  shape='circle')
expr_stmt.edge('0', '1', label='testlist_star_expr')
expr_stmt.node('1',  shape='doublecircle')
expr_stmt.edge('1', '2', label='=')
expr_stmt.edge('1', '3', label='annassign')
expr_stmt.edge('1', '4', label='augassign')
expr_stmt.node('2',  shape='circle')
expr_stmt.edge('2', '5', label='testlist_star_expr')
expr_stmt.edge('2', '5', label='yield_expr')
expr_stmt.node('3',  shape='doublecircle')
expr_stmt.node('4',  shape='circle')
expr_stmt.edge('4', '3', label='testlist')
expr_stmt.edge('4', '3', label='yield_expr')
expr_stmt.node('5',  shape='doublecircle')
expr_stmt.edge('5', '2', label='=')
expr_stmt.edge('5', '3', label='TYPE_COMMENT')
expr_stmt.render("expr_stmt", directory="png", cleanup=True, format="png")
annassign = Digraph('annassign', filename='annassign.gv')
annassign.attr(rankdir='LR', size='8,5')
annassign.node('0',  shape='circle')
annassign.edge('0', '1', label=':')
annassign.node('1',  shape='circle')
annassign.edge('1', '2', label='test')
annassign.node('2',  shape='doublecircle')
annassign.edge('2', '3', label='=')
annassign.node('3',  shape='circle')
annassign.edge('3', '4', label='testlist_star_expr')
annassign.edge('3', '4', label='yield_expr')
annassign.node('4',  shape='doublecircle')
annassign.render("annassign", directory="png", cleanup=True, format="png")
testlist_star_expr = Digraph('testlist_star_expr', filename='testlist_star_expr.gv')
testlist_star_expr.attr(rankdir='LR', size='8,5')
testlist_star_expr.node('0',  shape='circle')
testlist_star_expr.edge('0', '1', label='star_expr')
testlist_star_expr.edge('0', '1', label='test')
testlist_star_expr.node('1',  shape='doublecircle')
testlist_star_expr.edge('1', '2', label=',')
testlist_star_expr.node('2',  shape='doublecircle')
testlist_star_expr.edge('2', '1', label='star_expr')
testlist_star_expr.edge('2', '1', label='test')
testlist_star_expr.render("testlist_star_expr", directory="png", cleanup=True, format="png")
augassign = Digraph('augassign', filename='augassign.gv')
augassign.attr(rankdir='LR', size='8,5')
augassign.node('0',  shape='circle')
augassign.edge('0', '1', label='%=')
augassign.edge('0', '1', label='&=')
augassign.edge('0', '1', label='**=')
augassign.edge('0', '1', label='*=')
augassign.edge('0', '1', label='+=')
augassign.edge('0', '1', label='-=')
augassign.edge('0', '1', label='//=')
augassign.edge('0', '1', label='/=')
augassign.edge('0', '1', label='<<=')
augassign.edge('0', '1', label='>>=')
augassign.edge('0', '1', label='@=')
augassign.edge('0', '1', label='^=')
augassign.edge('0', '1', label='|=')
augassign.node('1',  shape='doublecircle')
augassign.render("augassign", directory="png", cleanup=True, format="png")
del_stmt = Digraph('del_stmt', filename='del_stmt.gv')
del_stmt.attr(rankdir='LR', size='8,5')
del_stmt.node('0',  shape='circle')
del_stmt.edge('0', '1', label='del')
del_stmt.node('1',  shape='circle')
del_stmt.edge('1', '2', label='exprlist')
del_stmt.node('2',  shape='doublecircle')
del_stmt.render("del_stmt", directory="png", cleanup=True, format="png")
pass_stmt = Digraph('pass_stmt', filename='pass_stmt.gv')
pass_stmt.attr(rankdir='LR', size='8,5')
pass_stmt.node('0',  shape='circle')
pass_stmt.edge('0', '1', label='pass')
pass_stmt.node('1',  shape='doublecircle')
pass_stmt.render("pass_stmt", directory="png", cleanup=True, format="png")
flow_stmt = Digraph('flow_stmt', filename='flow_stmt.gv')
flow_stmt.attr(rankdir='LR', size='8,5')
flow_stmt.node('0',  shape='circle')
flow_stmt.edge('0', '1', label='break_stmt')
flow_stmt.edge('0', '1', label='continue_stmt')
flow_stmt.edge('0', '1', label='raise_stmt')
flow_stmt.edge('0', '1', label='return_stmt')
flow_stmt.edge('0', '1', label='yield_stmt')
flow_stmt.node('1',  shape='doublecircle')
flow_stmt.render("flow_stmt", directory="png", cleanup=True, format="png")
break_stmt = Digraph('break_stmt', filename='break_stmt.gv')
break_stmt.attr(rankdir='LR', size='8,5')
break_stmt.node('0',  shape='circle')
break_stmt.edge('0', '1', label='break')
break_stmt.node('1',  shape='doublecircle')
break_stmt.render("break_stmt", directory="png", cleanup=True, format="png")
continue_stmt = Digraph('continue_stmt', filename='continue_stmt.gv')
continue_stmt.attr(rankdir='LR', size='8,5')
continue_stmt.node('0',  shape='circle')
continue_stmt.edge('0', '1', label='continue')
continue_stmt.node('1',  shape='doublecircle')
continue_stmt.render("continue_stmt", directory="png", cleanup=True, format="png")
return_stmt = Digraph('return_stmt', filename='return_stmt.gv')
return_stmt.attr(rankdir='LR', size='8,5')
return_stmt.node('0',  shape='circle')
return_stmt.edge('0', '1', label='return')
return_stmt.node('1',  shape='doublecircle')
return_stmt.edge('1', '2', label='testlist_star_expr')
return_stmt.node('2',  shape='doublecircle')
return_stmt.render("return_stmt", directory="png", cleanup=True, format="png")
yield_stmt = Digraph('yield_stmt', filename='yield_stmt.gv')
yield_stmt.attr(rankdir='LR', size='8,5')
yield_stmt.node('0',  shape='circle')
yield_stmt.edge('0', '1', label='yield_expr')
yield_stmt.node('1',  shape='doublecircle')
yield_stmt.render("yield_stmt", directory="png", cleanup=True, format="png")
raise_stmt = Digraph('raise_stmt', filename='raise_stmt.gv')
raise_stmt.attr(rankdir='LR', size='8,5')
raise_stmt.node('0',  shape='circle')
raise_stmt.edge('0', '1', label='raise')
raise_stmt.node('1',  shape='doublecircle')
raise_stmt.edge('1', '2', label='test')
raise_stmt.node('2',  shape='doublecircle')
raise_stmt.edge('2', '3', label='from')
raise_stmt.node('3',  shape='circle')
raise_stmt.edge('3', '4', label='test')
raise_stmt.node('4',  shape='doublecircle')
raise_stmt.render("raise_stmt", directory="png", cleanup=True, format="png")
import_stmt = Digraph('import_stmt', filename='import_stmt.gv')
import_stmt.attr(rankdir='LR', size='8,5')
import_stmt.node('0',  shape='circle')
import_stmt.edge('0', '1', label='import_from')
import_stmt.edge('0', '1', label='import_name')
import_stmt.node('1',  shape='doublecircle')
import_stmt.render("import_stmt", directory="png", cleanup=True, format="png")
import_name = Digraph('import_name', filename='import_name.gv')
import_name.attr(rankdir='LR', size='8,5')
import_name.node('0',  shape='circle')
import_name.edge('0', '1', label='import')
import_name.node('1',  shape='circle')
import_name.edge('1', '2', label='dotted_as_names')
import_name.node('2',  shape='doublecircle')
import_name.render("import_name", directory="png", cleanup=True, format="png")
import_from = Digraph('import_from', filename='import_from.gv')
import_from.attr(rankdir='LR', size='8,5')
import_from.node('0',  shape='circle')
import_from.edge('0', '1', label='from')
import_from.node('1',  shape='circle')
import_from.edge('1', '2', label='.')
import_from.edge('1', '2', label='...')
import_from.edge('1', '3', label='dotted_name')
import_from.node('2',  shape='circle')
import_from.edge('2', '2', label='.')
import_from.edge('2', '2', label='...')
import_from.edge('2', '4', label='import')
import_from.edge('2', '3', label='dotted_name')
import_from.node('3',  shape='circle')
import_from.edge('3', '4', label='import')
import_from.node('4',  shape='circle')
import_from.edge('4', '5', label='(')
import_from.edge('4', '6', label='*')
import_from.edge('4', '6', label='import_as_names')
import_from.node('5',  shape='circle')
import_from.edge('5', '7', label='import_as_names')
import_from.node('6',  shape='doublecircle')
import_from.node('7',  shape='circle')
import_from.edge('7', '6', label=')')
import_from.render("import_from", directory="png", cleanup=True, format="png")
import_as_name = Digraph('import_as_name', filename='import_as_name.gv')
import_as_name.attr(rankdir='LR', size='8,5')
import_as_name.node('0',  shape='circle')
import_as_name.edge('0', '1', label='NAME')
import_as_name.node('1',  shape='doublecircle')
import_as_name.edge('1', '2', label='as')
import_as_name.node('2',  shape='circle')
import_as_name.edge('2', '3', label='NAME')
import_as_name.node('3',  shape='doublecircle')
import_as_name.render("import_as_name", directory="png", cleanup=True, format="png")
dotted_as_name = Digraph('dotted_as_name', filename='dotted_as_name.gv')
dotted_as_name.attr(rankdir='LR', size='8,5')
dotted_as_name.node('0',  shape='circle')
dotted_as_name.edge('0', '1', label='dotted_name')
dotted_as_name.node('1',  shape='doublecircle')
dotted_as_name.edge('1', '2', label='as')
dotted_as_name.node('2',  shape='circle')
dotted_as_name.edge('2', '3', label='NAME')
dotted_as_name.node('3',  shape='doublecircle')
dotted_as_name.render("dotted_as_name", directory="png", cleanup=True, format="png")
import_as_names = Digraph('import_as_names', filename='import_as_names.gv')
import_as_names.attr(rankdir='LR', size='8,5')
import_as_names.node('0',  shape='circle')
import_as_names.edge('0', '1', label='import_as_name')
import_as_names.node('1',  shape='doublecircle')
import_as_names.edge('1', '2', label=',')
import_as_names.node('2',  shape='doublecircle')
import_as_names.edge('2', '1', label='import_as_name')
import_as_names.render("import_as_names", directory="png", cleanup=True, format="png")
dotted_as_names = Digraph('dotted_as_names', filename='dotted_as_names.gv')
dotted_as_names.attr(rankdir='LR', size='8,5')
dotted_as_names.node('0',  shape='circle')
dotted_as_names.edge('0', '1', label='dotted_as_name')
dotted_as_names.node('1',  shape='doublecircle')
dotted_as_names.edge('1', '0', label=',')
dotted_as_names.render("dotted_as_names", directory="png", cleanup=True, format="png")
dotted_name = Digraph('dotted_name', filename='dotted_name.gv')
dotted_name.attr(rankdir='LR', size='8,5')
dotted_name.node('0',  shape='circle')
dotted_name.edge('0', '1', label='NAME')
dotted_name.node('1',  shape='doublecircle')
dotted_name.edge('1', '0', label='.')
dotted_name.render("dotted_name", directory="png", cleanup=True, format="png")
global_stmt = Digraph('global_stmt', filename='global_stmt.gv')
global_stmt.attr(rankdir='LR', size='8,5')
global_stmt.node('0',  shape='circle')
global_stmt.edge('0', '1', label='global')
global_stmt.node('1',  shape='circle')
global_stmt.edge('1', '2', label='NAME')
global_stmt.node('2',  shape='doublecircle')
global_stmt.edge('2', '1', label=',')
global_stmt.render("global_stmt", directory="png", cleanup=True, format="png")
nonlocal_stmt = Digraph('nonlocal_stmt', filename='nonlocal_stmt.gv')
nonlocal_stmt.attr(rankdir='LR', size='8,5')
nonlocal_stmt.node('0',  shape='circle')
nonlocal_stmt.edge('0', '1', label='nonlocal')
nonlocal_stmt.node('1',  shape='circle')
nonlocal_stmt.edge('1', '2', label='NAME')
nonlocal_stmt.node('2',  shape='doublecircle')
nonlocal_stmt.edge('2', '1', label=',')
nonlocal_stmt.render("nonlocal_stmt", directory="png", cleanup=True, format="png")
assert_stmt = Digraph('assert_stmt', filename='assert_stmt.gv')
assert_stmt.attr(rankdir='LR', size='8,5')
assert_stmt.node('0',  shape='circle')
assert_stmt.edge('0', '1', label='assert')
assert_stmt.node('1',  shape='circle')
assert_stmt.edge('1', '2', label='test')
assert_stmt.node('2',  shape='doublecircle')
assert_stmt.edge('2', '3', label=',')
assert_stmt.node('3',  shape='circle')
assert_stmt.edge('3', '4', label='test')
assert_stmt.node('4',  shape='doublecircle')
assert_stmt.render("assert_stmt", directory="png", cleanup=True, format="png")
compound_stmt = Digraph('compound_stmt', filename='compound_stmt.gv')
compound_stmt.attr(rankdir='LR', size='8,5')
compound_stmt.node('0',  shape='circle')
compound_stmt.edge('0', '1', label='async_stmt')
compound_stmt.edge('0', '1', label='classdef')
compound_stmt.edge('0', '1', label='decorated')
compound_stmt.edge('0', '1', label='for_stmt')
compound_stmt.edge('0', '1', label='funcdef')
compound_stmt.edge('0', '1', label='if_stmt')
compound_stmt.edge('0', '1', label='try_stmt')
compound_stmt.edge('0', '1', label='while_stmt')
compound_stmt.edge('0', '1', label='with_stmt')
compound_stmt.node('1',  shape='doublecircle')
compound_stmt.render("compound_stmt", directory="png", cleanup=True, format="png")
async_stmt = Digraph('async_stmt', filename='async_stmt.gv')
async_stmt.attr(rankdir='LR', size='8,5')
async_stmt.node('0',  shape='circle')
async_stmt.edge('0', '1', label='ASYNC')
async_stmt.node('1',  shape='circle')
async_stmt.edge('1', '2', label='for_stmt')
async_stmt.edge('1', '2', label='funcdef')
async_stmt.edge('1', '2', label='with_stmt')
async_stmt.node('2',  shape='doublecircle')
async_stmt.render("async_stmt", directory="png", cleanup=True, format="png")
if_stmt = Digraph('if_stmt', filename='if_stmt.gv')
if_stmt.attr(rankdir='LR', size='8,5')
if_stmt.node('0',  shape='circle')
if_stmt.edge('0', '1', label='if')
if_stmt.node('1',  shape='circle')
if_stmt.edge('1', '2', label='namedexpr_test')
if_stmt.node('2',  shape='circle')
if_stmt.edge('2', '3', label=':')
if_stmt.node('3',  shape='circle')
if_stmt.edge('3', '4', label='suite')
if_stmt.node('4',  shape='doublecircle')
if_stmt.edge('4', '1', label='elif')
if_stmt.edge('4', '5', label='else')
if_stmt.node('5',  shape='circle')
if_stmt.edge('5', '6', label=':')
if_stmt.node('6',  shape='circle')
if_stmt.edge('6', '7', label='suite')
if_stmt.node('7',  shape='doublecircle')
if_stmt.render("if_stmt", directory="png", cleanup=True, format="png")
while_stmt = Digraph('while_stmt', filename='while_stmt.gv')
while_stmt.attr(rankdir='LR', size='8,5')
while_stmt.node('0',  shape='circle')
while_stmt.edge('0', '1', label='while')
while_stmt.node('1',  shape='circle')
while_stmt.edge('1', '2', label='namedexpr_test')
while_stmt.node('2',  shape='circle')
while_stmt.edge('2', '3', label=':')
while_stmt.node('3',  shape='circle')
while_stmt.edge('3', '4', label='suite')
while_stmt.node('4',  shape='doublecircle')
while_stmt.edge('4', '5', label='else')
while_stmt.node('5',  shape='circle')
while_stmt.edge('5', '6', label=':')
while_stmt.node('6',  shape='circle')
while_stmt.edge('6', '7', label='suite')
while_stmt.node('7',  shape='doublecircle')
while_stmt.render("while_stmt", directory="png", cleanup=True, format="png")
for_stmt = Digraph('for_stmt', filename='for_stmt.gv')
for_stmt.attr(rankdir='LR', size='8,5')
for_stmt.node('0',  shape='circle')
for_stmt.edge('0', '1', label='for')
for_stmt.node('1',  shape='circle')
for_stmt.edge('1', '2', label='exprlist')
for_stmt.node('2',  shape='circle')
for_stmt.edge('2', '3', label='in')
for_stmt.node('3',  shape='circle')
for_stmt.edge('3', '4', label='testlist')
for_stmt.node('4',  shape='circle')
for_stmt.edge('4', '5', label=':')
for_stmt.node('5',  shape='circle')
for_stmt.edge('5', '6', label='TYPE_COMMENT')
for_stmt.edge('5', '7', label='suite')
for_stmt.node('6',  shape='circle')
for_stmt.edge('6', '7', label='suite')
for_stmt.node('7',  shape='doublecircle')
for_stmt.edge('7', '8', label='else')
for_stmt.node('8',  shape='circle')
for_stmt.edge('8', '9', label=':')
for_stmt.node('9',  shape='circle')
for_stmt.edge('9', '10', label='suite')
for_stmt.node('10',  shape='doublecircle')
for_stmt.render("for_stmt", directory="png", cleanup=True, format="png")
try_stmt = Digraph('try_stmt', filename='try_stmt.gv')
try_stmt.attr(rankdir='LR', size='8,5')
try_stmt.node('0',  shape='circle')
try_stmt.edge('0', '1', label='try')
try_stmt.node('1',  shape='circle')
try_stmt.edge('1', '2', label=':')
try_stmt.node('2',  shape='circle')
try_stmt.edge('2', '3', label='suite')
try_stmt.node('3',  shape='circle')
try_stmt.edge('3', '4', label='finally')
try_stmt.edge('3', '5', label='except_clause')
try_stmt.node('4',  shape='circle')
try_stmt.edge('4', '6', label=':')
try_stmt.node('5',  shape='circle')
try_stmt.edge('5', '7', label=':')
try_stmt.node('6',  shape='circle')
try_stmt.edge('6', '8', label='suite')
try_stmt.node('7',  shape='circle')
try_stmt.edge('7', '9', label='suite')
try_stmt.node('8',  shape='doublecircle')
try_stmt.node('9',  shape='doublecircle')
try_stmt.edge('9', '10', label='else')
try_stmt.edge('9', '4', label='finally')
try_stmt.edge('9', '5', label='except_clause')
try_stmt.node('10',  shape='circle')
try_stmt.edge('10', '11', label=':')
try_stmt.node('11',  shape='circle')
try_stmt.edge('11', '12', label='suite')
try_stmt.node('12',  shape='doublecircle')
try_stmt.edge('12', '4', label='finally')
try_stmt.render("try_stmt", directory="png", cleanup=True, format="png")
with_stmt = Digraph('with_stmt', filename='with_stmt.gv')
with_stmt.attr(rankdir='LR', size='8,5')
with_stmt.node('0',  shape='circle')
with_stmt.edge('0', '1', label='with')
with_stmt.node('1',  shape='circle')
with_stmt.edge('1', '2', label='with_item')
with_stmt.node('2',  shape='circle')
with_stmt.edge('2', '1', label=',')
with_stmt.edge('2', '3', label=':')
with_stmt.node('3',  shape='circle')
with_stmt.edge('3', '4', label='TYPE_COMMENT')
with_stmt.edge('3', '5', label='suite')
with_stmt.node('4',  shape='circle')
with_stmt.edge('4', '5', label='suite')
with_stmt.node('5',  shape='doublecircle')
with_stmt.render("with_stmt", directory="png", cleanup=True, format="png")
with_item = Digraph('with_item', filename='with_item.gv')
with_item.attr(rankdir='LR', size='8,5')
with_item.node('0',  shape='circle')
with_item.edge('0', '1', label='test')
with_item.node('1',  shape='doublecircle')
with_item.edge('1', '2', label='as')
with_item.node('2',  shape='circle')
with_item.edge('2', '3', label='expr')
with_item.node('3',  shape='doublecircle')
with_item.render("with_item", directory="png", cleanup=True, format="png")
except_clause = Digraph('except_clause', filename='except_clause.gv')
except_clause.attr(rankdir='LR', size='8,5')
except_clause.node('0',  shape='circle')
except_clause.edge('0', '1', label='except')
except_clause.node('1',  shape='doublecircle')
except_clause.edge('1', '2', label='test')
except_clause.node('2',  shape='doublecircle')
except_clause.edge('2', '3', label='as')
except_clause.node('3',  shape='circle')
except_clause.edge('3', '4', label='NAME')
except_clause.node('4',  shape='doublecircle')
except_clause.render("except_clause", directory="png", cleanup=True, format="png")
suite = Digraph('suite', filename='suite.gv')
suite.attr(rankdir='LR', size='8,5')
suite.node('0',  shape='circle')
suite.edge('0', '1', label='NEWLINE')
suite.edge('0', '2', label='simple_stmt')
suite.node('1',  shape='circle')
suite.edge('1', '3', label='INDENT')
suite.node('2',  shape='doublecircle')
suite.node('3',  shape='circle')
suite.edge('3', '4', label='stmt')
suite.node('4',  shape='circle')
suite.edge('4', '2', label='DEDENT')
suite.edge('4', '4', label='stmt')
suite.render("suite", directory="png", cleanup=True, format="png")
namedexpr_test = Digraph('namedexpr_test', filename='namedexpr_test.gv')
namedexpr_test.attr(rankdir='LR', size='8,5')
namedexpr_test.node('0',  shape='circle')
namedexpr_test.edge('0', '1', label='test')
namedexpr_test.node('1',  shape='doublecircle')
namedexpr_test.edge('1', '2', label=':=')
namedexpr_test.node('2',  shape='circle')
namedexpr_test.edge('2', '3', label='test')
namedexpr_test.node('3',  shape='doublecircle')
namedexpr_test.render("namedexpr_test", directory="png", cleanup=True, format="png")
test = Digraph('test', filename='test.gv')
test.attr(rankdir='LR', size='8,5')
test.node('0',  shape='circle')
test.edge('0', '1', label='lambdef')
test.edge('0', '2', label='or_test')
test.node('1',  shape='doublecircle')
test.node('2',  shape='doublecircle')
test.edge('2', '3', label='if')
test.node('3',  shape='circle')
test.edge('3', '4', label='or_test')
test.node('4',  shape='circle')
test.edge('4', '5', label='else')
test.node('5',  shape='circle')
test.edge('5', '1', label='test')
test.render("test", directory="png", cleanup=True, format="png")
test_nocond = Digraph('test_nocond', filename='test_nocond.gv')
test_nocond.attr(rankdir='LR', size='8,5')
test_nocond.node('0',  shape='circle')
test_nocond.edge('0', '1', label='lambdef_nocond')
test_nocond.edge('0', '1', label='or_test')
test_nocond.node('1',  shape='doublecircle')
test_nocond.render("test_nocond", directory="png", cleanup=True, format="png")
lambdef = Digraph('lambdef', filename='lambdef.gv')
lambdef.attr(rankdir='LR', size='8,5')
lambdef.node('0',  shape='circle')
lambdef.edge('0', '1', label='lambda')
lambdef.node('1',  shape='circle')
lambdef.edge('1', '2', label=':')
lambdef.edge('1', '3', label='varargslist')
lambdef.node('2',  shape='circle')
lambdef.edge('2', '4', label='test')
lambdef.node('3',  shape='circle')
lambdef.edge('3', '2', label=':')
lambdef.node('4',  shape='doublecircle')
lambdef.render("lambdef", directory="png", cleanup=True, format="png")
lambdef_nocond = Digraph('lambdef_nocond', filename='lambdef_nocond.gv')
lambdef_nocond.attr(rankdir='LR', size='8,5')
lambdef_nocond.node('0',  shape='circle')
lambdef_nocond.edge('0', '1', label='lambda')
lambdef_nocond.node('1',  shape='circle')
lambdef_nocond.edge('1', '2', label=':')
lambdef_nocond.edge('1', '3', label='varargslist')
lambdef_nocond.node('2',  shape='circle')
lambdef_nocond.edge('2', '4', label='test_nocond')
lambdef_nocond.node('3',  shape='circle')
lambdef_nocond.edge('3', '2', label=':')
lambdef_nocond.node('4',  shape='doublecircle')
lambdef_nocond.render("lambdef_nocond", directory="png", cleanup=True, format="png")
or_test = Digraph('or_test', filename='or_test.gv')
or_test.attr(rankdir='LR', size='8,5')
or_test.node('0',  shape='circle')
or_test.edge('0', '1', label='and_test')
or_test.node('1',  shape='doublecircle')
or_test.edge('1', '0', label='or')
or_test.render("or_test", directory="png", cleanup=True, format="png")
and_test = Digraph('and_test', filename='and_test.gv')
and_test.attr(rankdir='LR', size='8,5')
and_test.node('0',  shape='circle')
and_test.edge('0', '1', label='not_test')
and_test.node('1',  shape='doublecircle')
and_test.edge('1', '0', label='and')
and_test.render("and_test", directory="png", cleanup=True, format="png")
not_test = Digraph('not_test', filename='not_test.gv')
not_test.attr(rankdir='LR', size='8,5')
not_test.node('0',  shape='circle')
not_test.edge('0', '1', label='not')
not_test.edge('0', '2', label='comparison')
not_test.node('1',  shape='circle')
not_test.edge('1', '2', label='not_test')
not_test.node('2',  shape='doublecircle')
not_test.render("not_test", directory="png", cleanup=True, format="png")
comparison = Digraph('comparison', filename='comparison.gv')
comparison.attr(rankdir='LR', size='8,5')
comparison.node('0',  shape='circle')
comparison.edge('0', '1', label='expr')
comparison.node('1',  shape='doublecircle')
comparison.edge('1', '0', label='comp_op')
comparison.render("comparison", directory="png", cleanup=True, format="png")
comp_op = Digraph('comp_op', filename='comp_op.gv')
comp_op.attr(rankdir='LR', size='8,5')
comp_op.node('0',  shape='circle')
comp_op.edge('0', '1', label='!=')
comp_op.edge('0', '1', label='<')
comp_op.edge('0', '1', label='<=')
comp_op.edge('0', '1', label='<>')
comp_op.edge('0', '1', label='==')
comp_op.edge('0', '1', label='>')
comp_op.edge('0', '1', label='>=')
comp_op.edge('0', '1', label='in')
comp_op.edge('0', '2', label='is')
comp_op.edge('0', '3', label='not')
comp_op.node('1',  shape='doublecircle')
comp_op.node('2',  shape='doublecircle')
comp_op.edge('2', '1', label='not')
comp_op.node('3',  shape='circle')
comp_op.edge('3', '1', label='in')
comp_op.render("comp_op", directory="png", cleanup=True, format="png")
star_expr = Digraph('star_expr', filename='star_expr.gv')
star_expr.attr(rankdir='LR', size='8,5')
star_expr.node('0',  shape='circle')
star_expr.edge('0', '1', label='*')
star_expr.node('1',  shape='circle')
star_expr.edge('1', '2', label='expr')
star_expr.node('2',  shape='doublecircle')
star_expr.render("star_expr", directory="png", cleanup=True, format="png")
expr = Digraph('expr', filename='expr.gv')
expr.attr(rankdir='LR', size='8,5')
expr.node('0',  shape='circle')
expr.edge('0', '1', label='xor_expr')
expr.node('1',  shape='doublecircle')
expr.edge('1', '0', label='|')
expr.render("expr", directory="png", cleanup=True, format="png")
xor_expr = Digraph('xor_expr', filename='xor_expr.gv')
xor_expr.attr(rankdir='LR', size='8,5')
xor_expr.node('0',  shape='circle')
xor_expr.edge('0', '1', label='and_expr')
xor_expr.node('1',  shape='doublecircle')
xor_expr.edge('1', '0', label='^')
xor_expr.render("xor_expr", directory="png", cleanup=True, format="png")
and_expr = Digraph('and_expr', filename='and_expr.gv')
and_expr.attr(rankdir='LR', size='8,5')
and_expr.node('0',  shape='circle')
and_expr.edge('0', '1', label='shift_expr')
and_expr.node('1',  shape='doublecircle')
and_expr.edge('1', '0', label='&')
and_expr.render("and_expr", directory="png", cleanup=True, format="png")
shift_expr = Digraph('shift_expr', filename='shift_expr.gv')
shift_expr.attr(rankdir='LR', size='8,5')
shift_expr.node('0',  shape='circle')
shift_expr.edge('0', '1', label='arith_expr')
shift_expr.node('1',  shape='doublecircle')
shift_expr.edge('1', '0', label='<<')
shift_expr.edge('1', '0', label='>>')
shift_expr.render("shift_expr", directory="png", cleanup=True, format="png")
arith_expr = Digraph('arith_expr', filename='arith_expr.gv')
arith_expr.attr(rankdir='LR', size='8,5')
arith_expr.node('0',  shape='circle')
arith_expr.edge('0', '1', label='term')
arith_expr.node('1',  shape='doublecircle')
arith_expr.edge('1', '0', label='+')
arith_expr.edge('1', '0', label='-')
arith_expr.render("arith_expr", directory="png", cleanup=True, format="png")
term = Digraph('term', filename='term.gv')
term.attr(rankdir='LR', size='8,5')
term.node('0',  shape='circle')
term.edge('0', '1', label='factor')
term.node('1',  shape='doublecircle')
term.edge('1', '0', label='%')
term.edge('1', '0', label='*')
term.edge('1', '0', label='/')
term.edge('1', '0', label='//')
term.edge('1', '0', label='@')
term.render("term", directory="png", cleanup=True, format="png")
factor = Digraph('factor', filename='factor.gv')
factor.attr(rankdir='LR', size='8,5')
factor.node('0',  shape='circle')
factor.edge('0', '1', label='+')
factor.edge('0', '1', label='-')
factor.edge('0', '1', label='~')
factor.edge('0', '2', label='power')
factor.node('1',  shape='circle')
factor.edge('1', '2', label='factor')
factor.node('2',  shape='doublecircle')
factor.render("factor", directory="png", cleanup=True, format="png")
power = Digraph('power', filename='power.gv')
power.attr(rankdir='LR', size='8,5')
power.node('0',  shape='circle')
power.edge('0', '1', label='atom_expr')
power.node('1',  shape='doublecircle')
power.edge('1', '2', label='**')
power.node('2',  shape='circle')
power.edge('2', '3', label='factor')
power.node('3',  shape='doublecircle')
power.render("power", directory="png", cleanup=True, format="png")
atom_expr = Digraph('atom_expr', filename='atom_expr.gv')
atom_expr.attr(rankdir='LR', size='8,5')
atom_expr.node('0',  shape='circle')
atom_expr.edge('0', '1', label='AWAIT')
atom_expr.edge('0', '2', label='atom')
atom_expr.node('1',  shape='circle')
atom_expr.edge('1', '2', label='atom')
atom_expr.node('2',  shape='doublecircle')
atom_expr.edge('2', '2', label='trailer')
atom_expr.render("atom_expr", directory="png", cleanup=True, format="png")
atom = Digraph('atom', filename='atom.gv')
atom.attr(rankdir='LR', size='8,5')
atom.node('0',  shape='circle')
atom.edge('0', '1', label='(')
atom.edge('0', '2', label='...')
atom.edge('0', '2', label='False')
atom.edge('0', '2', label='None')
atom.edge('0', '2', label='True')
atom.edge('0', '3', label='[')
atom.edge('0', '4', label='{')
atom.edge('0', '2', label='NAME')
atom.edge('0', '2', label='NUMBER')
atom.edge('0', '5', label='STRING')
atom.node('1',  shape='circle')
atom.edge('1', '2', label=')')
atom.edge('1', '6', label='testlist_comp')
atom.edge('1', '6', label='yield_expr')
atom.node('2',  shape='doublecircle')
atom.node('3',  shape='circle')
atom.edge('3', '2', label=']')
atom.edge('3', '7', label='testlist_comp')
atom.node('4',  shape='circle')
atom.edge('4', '2', label='}')
atom.edge('4', '8', label='dictorsetmaker')
atom.node('5',  shape='doublecircle')
atom.edge('5', '5', label='STRING')
atom.node('6',  shape='circle')
atom.edge('6', '2', label=')')
atom.node('7',  shape='circle')
atom.edge('7', '2', label=']')
atom.node('8',  shape='circle')
atom.edge('8', '2', label='}')
atom.render("atom", directory="png", cleanup=True, format="png")
testlist_comp = Digraph('testlist_comp', filename='testlist_comp.gv')
testlist_comp.attr(rankdir='LR', size='8,5')
testlist_comp.node('0',  shape='circle')
testlist_comp.edge('0', '1', label='namedexpr_test')
testlist_comp.edge('0', '1', label='star_expr')
testlist_comp.node('1',  shape='doublecircle')
testlist_comp.edge('1', '2', label=',')
testlist_comp.edge('1', '3', label='comp_for')
testlist_comp.node('2',  shape='doublecircle')
testlist_comp.edge('2', '4', label='namedexpr_test')
testlist_comp.edge('2', '4', label='star_expr')
testlist_comp.node('3',  shape='doublecircle')
testlist_comp.node('4',  shape='doublecircle')
testlist_comp.edge('4', '2', label=',')
testlist_comp.render("testlist_comp", directory="png", cleanup=True, format="png")
trailer = Digraph('trailer', filename='trailer.gv')
trailer.attr(rankdir='LR', size='8,5')
trailer.node('0',  shape='circle')
trailer.edge('0', '1', label='(')
trailer.edge('0', '2', label='.')
trailer.edge('0', '3', label='[')
trailer.node('1',  shape='circle')
trailer.edge('1', '4', label=')')
trailer.edge('1', '5', label='arglist')
trailer.node('2',  shape='circle')
trailer.edge('2', '4', label='NAME')
trailer.node('3',  shape='circle')
trailer.edge('3', '6', label='subscriptlist')
trailer.node('4',  shape='doublecircle')
trailer.node('5',  shape='circle')
trailer.edge('5', '4', label=')')
trailer.node('6',  shape='circle')
trailer.edge('6', '4', label=']')
trailer.render("trailer", directory="png", cleanup=True, format="png")
subscriptlist = Digraph('subscriptlist', filename='subscriptlist.gv')
subscriptlist.attr(rankdir='LR', size='8,5')
subscriptlist.node('0',  shape='circle')
subscriptlist.edge('0', '1', label='subscript')
subscriptlist.node('1',  shape='doublecircle')
subscriptlist.edge('1', '2', label=',')
subscriptlist.node('2',  shape='doublecircle')
subscriptlist.edge('2', '1', label='subscript')
subscriptlist.render("subscriptlist", directory="png", cleanup=True, format="png")
subscript = Digraph('subscript', filename='subscript.gv')
subscript.attr(rankdir='LR', size='8,5')
subscript.node('0',  shape='circle')
subscript.edge('0', '1', label=':')
subscript.edge('0', '2', label='test')
subscript.node('1',  shape='doublecircle')
subscript.edge('1', '3', label='sliceop')
subscript.edge('1', '4', label='test')
subscript.node('2',  shape='doublecircle')
subscript.edge('2', '1', label=':')
subscript.node('3',  shape='doublecircle')
subscript.node('4',  shape='doublecircle')
subscript.edge('4', '3', label='sliceop')
subscript.render("subscript", directory="png", cleanup=True, format="png")
sliceop = Digraph('sliceop', filename='sliceop.gv')
sliceop.attr(rankdir='LR', size='8,5')
sliceop.node('0',  shape='circle')
sliceop.edge('0', '1', label=':')
sliceop.node('1',  shape='doublecircle')
sliceop.edge('1', '2', label='test')
sliceop.node('2',  shape='doublecircle')
sliceop.render("sliceop", directory="png", cleanup=True, format="png")
exprlist = Digraph('exprlist', filename='exprlist.gv')
exprlist.attr(rankdir='LR', size='8,5')
exprlist.node('0',  shape='circle')
exprlist.edge('0', '1', label='expr')
exprlist.edge('0', '1', label='star_expr')
exprlist.node('1',  shape='doublecircle')
exprlist.edge('1', '2', label=',')
exprlist.node('2',  shape='doublecircle')
exprlist.edge('2', '1', label='expr')
exprlist.edge('2', '1', label='star_expr')
exprlist.render("exprlist", directory="png", cleanup=True, format="png")
testlist = Digraph('testlist', filename='testlist.gv')
testlist.attr(rankdir='LR', size='8,5')
testlist.node('0',  shape='circle')
testlist.edge('0', '1', label='test')
testlist.node('1',  shape='doublecircle')
testlist.edge('1', '2', label=',')
testlist.node('2',  shape='doublecircle')
testlist.edge('2', '1', label='test')
testlist.render("testlist", directory="png", cleanup=True, format="png")
dictorsetmaker = Digraph('dictorsetmaker', filename='dictorsetmaker.gv')
dictorsetmaker.attr(rankdir='LR', size='8,5')
dictorsetmaker.node('0',  shape='circle')
dictorsetmaker.edge('0', '1', label='**')
dictorsetmaker.edge('0', '2', label='star_expr')
dictorsetmaker.edge('0', '3', label='test')
dictorsetmaker.node('1',  shape='circle')
dictorsetmaker.edge('1', '4', label='expr')
dictorsetmaker.node('2',  shape='doublecircle')
dictorsetmaker.edge('2', '5', label=',')
dictorsetmaker.edge('2', '6', label='comp_for')
dictorsetmaker.node('3',  shape='doublecircle')
dictorsetmaker.edge('3', '5', label=',')
dictorsetmaker.edge('3', '7', label=':')
dictorsetmaker.edge('3', '6', label='comp_for')
dictorsetmaker.node('4',  shape='doublecircle')
dictorsetmaker.edge('4', '8', label=',')
dictorsetmaker.edge('4', '6', label='comp_for')
dictorsetmaker.node('5',  shape='doublecircle')
dictorsetmaker.edge('5', '9', label='star_expr')
dictorsetmaker.edge('5', '9', label='test')
dictorsetmaker.node('6',  shape='doublecircle')
dictorsetmaker.node('7',  shape='circle')
dictorsetmaker.edge('7', '4', label='test')
dictorsetmaker.node('8',  shape='doublecircle')
dictorsetmaker.edge('8', '10', label='**')
dictorsetmaker.edge('8', '11', label='test')
dictorsetmaker.node('9',  shape='doublecircle')
dictorsetmaker.edge('9', '5', label=',')
dictorsetmaker.node('10',  shape='circle')
dictorsetmaker.edge('10', '12', label='expr')
dictorsetmaker.node('11',  shape='circle')
dictorsetmaker.edge('11', '13', label=':')
dictorsetmaker.node('12',  shape='doublecircle')
dictorsetmaker.edge('12', '8', label=',')
dictorsetmaker.node('13',  shape='circle')
dictorsetmaker.edge('13', '12', label='test')
dictorsetmaker.render("dictorsetmaker", directory="png", cleanup=True, format="png")
classdef = Digraph('classdef', filename='classdef.gv')
classdef.attr(rankdir='LR', size='8,5')
classdef.node('0',  shape='circle')
classdef.edge('0', '1', label='class')
classdef.node('1',  shape='circle')
classdef.edge('1', '2', label='NAME')
classdef.node('2',  shape='circle')
classdef.edge('2', '3', label='(')
classdef.edge('2', '4', label=':')
classdef.node('3',  shape='circle')
classdef.edge('3', '5', label=')')
classdef.edge('3', '6', label='arglist')
classdef.node('4',  shape='circle')
classdef.edge('4', '7', label='suite')
classdef.node('5',  shape='circle')
classdef.edge('5', '4', label=':')
classdef.node('6',  shape='circle')
classdef.edge('6', '5', label=')')
classdef.node('7',  shape='doublecircle')
classdef.render("classdef", directory="png", cleanup=True, format="png")
arglist = Digraph('arglist', filename='arglist.gv')
arglist.attr(rankdir='LR', size='8,5')
arglist.node('0',  shape='circle')
arglist.edge('0', '1', label='argument')
arglist.node('1',  shape='doublecircle')
arglist.edge('1', '2', label=',')
arglist.node('2',  shape='doublecircle')
arglist.edge('2', '1', label='argument')
arglist.render("arglist", directory="png", cleanup=True, format="png")
argument = Digraph('argument', filename='argument.gv')
argument.attr(rankdir='LR', size='8,5')
argument.node('0',  shape='circle')
argument.edge('0', '1', label='*')
argument.edge('0', '1', label='**')
argument.edge('0', '2', label='test')
argument.node('1',  shape='circle')
argument.edge('1', '3', label='test')
argument.node('2',  shape='doublecircle')
argument.edge('2', '1', label=':=')
argument.edge('2', '1', label='=')
argument.edge('2', '3', label='comp_for')
argument.node('3',  shape='doublecircle')
argument.render("argument", directory="png", cleanup=True, format="png")
comp_iter = Digraph('comp_iter', filename='comp_iter.gv')
comp_iter.attr(rankdir='LR', size='8,5')
comp_iter.node('0',  shape='circle')
comp_iter.edge('0', '1', label='comp_for')
comp_iter.edge('0', '1', label='comp_if')
comp_iter.node('1',  shape='doublecircle')
comp_iter.render("comp_iter", directory="png", cleanup=True, format="png")
sync_comp_for = Digraph('sync_comp_for', filename='sync_comp_for.gv')
sync_comp_for.attr(rankdir='LR', size='8,5')
sync_comp_for.node('0',  shape='circle')
sync_comp_for.edge('0', '1', label='for')
sync_comp_for.node('1',  shape='circle')
sync_comp_for.edge('1', '2', label='exprlist')
sync_comp_for.node('2',  shape='circle')
sync_comp_for.edge('2', '3', label='in')
sync_comp_for.node('3',  shape='circle')
sync_comp_for.edge('3', '4', label='or_test')
sync_comp_for.node('4',  shape='doublecircle')
sync_comp_for.edge('4', '5', label='comp_iter')
sync_comp_for.node('5',  shape='doublecircle')
sync_comp_for.render("sync_comp_for", directory="png", cleanup=True, format="png")
comp_for = Digraph('comp_for', filename='comp_for.gv')
comp_for.attr(rankdir='LR', size='8,5')
comp_for.node('0',  shape='circle')
comp_for.edge('0', '1', label='ASYNC')
comp_for.edge('0', '2', label='sync_comp_for')
comp_for.node('1',  shape='circle')
comp_for.edge('1', '2', label='sync_comp_for')
comp_for.node('2',  shape='doublecircle')
comp_for.render("comp_for", directory="png", cleanup=True, format="png")
comp_if = Digraph('comp_if', filename='comp_if.gv')
comp_if.attr(rankdir='LR', size='8,5')
comp_if.node('0',  shape='circle')
comp_if.edge('0', '1', label='if')
comp_if.node('1',  shape='circle')
comp_if.edge('1', '2', label='test_nocond')
comp_if.node('2',  shape='doublecircle')
comp_if.edge('2', '3', label='comp_iter')
comp_if.node('3',  shape='doublecircle')
comp_if.render("comp_if", directory="png", cleanup=True, format="png")
encoding_decl = Digraph('encoding_decl', filename='encoding_decl.gv')
encoding_decl.attr(rankdir='LR', size='8,5')
encoding_decl.node('0',  shape='circle')
encoding_decl.edge('0', '1', label='NAME')
encoding_decl.node('1',  shape='doublecircle')
encoding_decl.render("encoding_decl", directory="png", cleanup=True, format="png")
yield_expr = Digraph('yield_expr', filename='yield_expr.gv')
yield_expr.attr(rankdir='LR', size='8,5')
yield_expr.node('0',  shape='circle')
yield_expr.edge('0', '1', label='yield')
yield_expr.node('1',  shape='doublecircle')
yield_expr.edge('1', '2', label='yield_arg')
yield_expr.node('2',  shape='doublecircle')
yield_expr.render("yield_expr", directory="png", cleanup=True, format="png")
yield_arg = Digraph('yield_arg', filename='yield_arg.gv')
yield_arg.attr(rankdir='LR', size='8,5')
yield_arg.node('0',  shape='circle')
yield_arg.edge('0', '1', label='from')
yield_arg.edge('0', '2', label='testlist_star_expr')
yield_arg.node('1',  shape='circle')
yield_arg.edge('1', '2', label='test')
yield_arg.node('2',  shape='doublecircle')
yield_arg.render("yield_arg", directory="png", cleanup=True, format="png")
func_body_suite = Digraph('func_body_suite', filename='func_body_suite.gv')
func_body_suite.attr(rankdir='LR', size='8,5')
func_body_suite.node('0',  shape='circle')
func_body_suite.edge('0', '1', label='NEWLINE')
func_body_suite.edge('0', '2', label='simple_stmt')
func_body_suite.node('1',  shape='circle')
func_body_suite.edge('1', '3', label='INDENT')
func_body_suite.edge('1', '4', label='TYPE_COMMENT')
func_body_suite.node('2',  shape='doublecircle')
func_body_suite.node('3',  shape='circle')
func_body_suite.edge('3', '5', label='stmt')
func_body_suite.node('4',  shape='circle')
func_body_suite.edge('4', '6', label='NEWLINE')
func_body_suite.node('5',  shape='circle')
func_body_suite.edge('5', '2', label='DEDENT')
func_body_suite.edge('5', '5', label='stmt')
func_body_suite.node('6',  shape='circle')
func_body_suite.edge('6', '3', label='INDENT')
func_body_suite.render("func_body_suite", directory="png", cleanup=True, format="png")
func_type_input = Digraph('func_type_input', filename='func_type_input.gv')
func_type_input.attr(rankdir='LR', size='8,5')
func_type_input.node('0',  shape='circle')
func_type_input.edge('0', '1', label='func_type')
func_type_input.node('1',  shape='circle')
func_type_input.edge('1', '2', label='ENDMARKER')
func_type_input.edge('1', '1', label='NEWLINE')
func_type_input.node('2',  shape='doublecircle')
func_type_input.render("func_type_input", directory="png", cleanup=True, format="png")
func_type = Digraph('func_type', filename='func_type.gv')
func_type.attr(rankdir='LR', size='8,5')
func_type.node('0',  shape='circle')
func_type.edge('0', '1', label='(')
func_type.node('1',  shape='circle')
func_type.edge('1', '2', label=')')
func_type.edge('1', '3', label='typelist')
func_type.node('2',  shape='circle')
func_type.edge('2', '4', label='->')
func_type.node('3',  shape='circle')
func_type.edge('3', '2', label=')')
func_type.node('4',  shape='circle')
func_type.edge('4', '5', label='test')
func_type.node('5',  shape='doublecircle')
func_type.render("func_type", directory="png", cleanup=True, format="png")
typelist = Digraph('typelist', filename='typelist.gv')
typelist.attr(rankdir='LR', size='8,5')
typelist.node('0',  shape='circle')
typelist.edge('0', '1', label='*')
typelist.edge('0', '2', label='**')
typelist.edge('0', '3', label='test')
typelist.node('1',  shape='doublecircle')
typelist.edge('1', '4', label=',')
typelist.edge('1', '5', label='test')
typelist.node('2',  shape='circle')
typelist.edge('2', '6', label='test')
typelist.node('3',  shape='doublecircle')
typelist.edge('3', '7', label=',')
typelist.node('4',  shape='circle')
typelist.edge('4', '2', label='**')
typelist.edge('4', '5', label='test')
typelist.node('5',  shape='doublecircle')
typelist.edge('5', '4', label=',')
typelist.node('6',  shape='doublecircle')
typelist.node('7',  shape='doublecircle')
typelist.edge('7', '8', label='*')
typelist.edge('7', '2', label='**')
typelist.edge('7', '3', label='test')
typelist.node('8',  shape='doublecircle')
typelist.edge('8', '9', label=',')
typelist.edge('8', '10', label='test')
typelist.node('9',  shape='circle')
typelist.edge('9', '2', label='**')
typelist.edge('9', '10', label='test')
typelist.node('10',  shape='doublecircle')
typelist.edge('10', '9', label=',')
typelist.render("typelist", directory="png", cleanup=True, format="png")
